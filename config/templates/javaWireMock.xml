<templateSet group="javaWireMock">
  <template name="wireMockRegisterExtension" value="@org.junit.jupiter.api.extension.RegisterExtension&#10;    static com.github.tomakehurst.wiremock.junit5.WireMockExtension wireMockServer = com.github.tomakehurst.wiremock.junit5.WireMockExtension.newInstance()&#10;            .options(com.github.tomakehurst.wiremock.core.WireMockConfiguration.wireMockConfig()&#10;                    .dynamicPort())&#10;            .build();&#10;&#10;    private final java.net.http.HttpClient httpClient = java.net.http.HttpClient.newHttpClient();&#10;&#10;    @org.junit.jupiter.api.Test&#10;    @org.junit.jupiter.api.DisplayName(&quot;test get endpoint&quot;)&#10;    void testGetEndpoint() throws java.lang.Exception {&#10;        wireMockServer.stubFor(get(urlEqualTo(&quot;/api/users/1&quot;))&#10;                .willReturn(aResponse()&#10;                        .withStatus(200)&#10;                        .withHeader(&quot;Content-Type&quot;, &quot;application/json&quot;)&#10;                        .withBody(&quot;&quot;&quot;&#10;                                {&#10;  &quot;id&quot;: 1,&#10;  &quot;name&quot;: &quot;John Doe&quot;,&#10;  &quot;email&quot;: &quot;john@example.com&quot;&#10;}&#10;&#10;                                &quot;&quot;&quot;)));&#10;&#10;        var request = java.net.http.HttpRequest.newBuilder()&#10;                .uri(java.net.URI.create(wireMockServer.baseUrl() + &quot;/api/users/1&quot;))&#10;                .GET()&#10;                .build();&#10;&#10;        var response = httpClient.send(request, java.net.http.HttpResponse.BodyHandlers.ofString());&#10;&#10;        assertThat(response.statusCode()).isEqualTo(200);&#10;        assertThat(response.body()).contains(&quot;John Doe&quot;);&#10;        assertThat(response.body()).contains(&quot;john@example.com&quot;);&#10;&#10;        wireMockServer.verify(getRequestedFor(urlEqualTo(&quot;/api/users/1&quot;)));&#10;    }&#10;&#10;    @org.junit.jupiter.api.Test&#10;    @org.junit.jupiter.api.DisplayName(&quot;test post endpoint&quot;)&#10;    void testPostEndpoint() throws java.lang.Exception {&#10;        wireMockServer.stubFor(post(urlEqualTo(&quot;/api/users&quot;))&#10;                .withHeader(&quot;Content-Type&quot;, equalTo(&quot;application/json&quot;))&#10;                .withRequestBody(containing(&quot;Jane&quot;))&#10;                .willReturn(aResponse()&#10;                        .withStatus(201)&#10;                        .withHeader(&quot;Content-Type&quot;, &quot;application/json&quot;)&#10;                        .withBody(&quot;&quot;&quot;&#10;                                {&#10;  &quot;id&quot;: 2,&#10;  &quot;name&quot;: &quot;Jane Smith&quot;,&#10;  &quot;message&quot;: &quot;User created successfully&quot;&#10;}&#10;&#10;                                &quot;&quot;&quot;)));&#10;&#10;        var requestBody = &quot;&quot;&quot;&#10;                {&#10;                  &quot;name&quot;: &quot;Jane Smith&quot;,&#10;                  &quot;email&quot;: &quot;jane@example.com&quot;&#10;                }&#10;                &quot;&quot;&quot;;&#10;&#10;        var request = java.net.http.HttpRequest.newBuilder()&#10;                .uri(java.net.URI.create(wireMockServer.baseUrl() + &quot;/api/users&quot;))&#10;                .header(&quot;Content-Type&quot;, &quot;application/json&quot;)&#10;                .POST(java.net.http.HttpRequest.BodyPublishers.ofString(requestBody))&#10;                .build();&#10;&#10;        var response = httpClient.send(request, java.net.http.HttpResponse.BodyHandlers.ofString());&#10;&#10;        assertThat(response.statusCode()).isEqualTo(201);&#10;        assertThat(response.body()).contains(&quot;Jane Smith&quot;);&#10;        assertThat(response.body()).contains(&quot;User created successfully&quot;);&#10;&#10;        wireMockServer.verify(postRequestedFor(urlEqualTo(&quot;/api/users&quot;))&#10;                .withHeader(&quot;Content-Type&quot;, equalTo(&quot;application/json&quot;)));&#10;    }" description="WireMock @RegisterExtension example" toReformat="true" toShortenFQNames="true" useStaticImport="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
</templateSet>