<templateSet group="java">
  <template name="test" value="@org.junit.jupiter.api.Test&#10;@org.junit.jupiter.api.DisplayName(&quot;$DISPLAY_NAME$&quot;)&#10;void $METHOD_NAME$() {&#10;    $END$&#10;    $BODY$&#10;}" description="Create a new JUnit test that fails" toReformat="true" toShortenFQNames="true" useStaticImport="true">
    <variable name="DISPLAY_NAME" expression="" defaultValue="&quot;Display name for the test method&quot;" alwaysStopAt="true" />
    <variable name="METHOD_NAME" expression="camelCase(DISPLAY_NAME)" defaultValue="&quot;mehodName&quot;" alwaysStopAt="true" />
    <variable name="BODY" expression="" defaultValue="&quot;org.junit.jupiter.api.Assertions.fail(\&quot;Not implemented\&quot;);&quot;" alwaysStopAt="false" />
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="logger" value="private static final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger($CLASS_NAME$.class);" description="SLF4J logger" toReformat="false" toShortenFQNames="true">
    <variable name="CLASS_NAME" expression="className()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="random" value="java.util.concurrent.ThreadLocalRandom.current()" description="ThreadLocalRandom.current()" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_EXPRESSION" value="true" />
    </context>
  </template>
  <template name="util" value="private $CLASS_NAME$() {&#10;    throw new java.lang.IllegalStateException(&quot;Utility class&quot;);&#10;}" description="Util class private constructor" toReformat="true" toShortenFQNames="true">
    <variable name="CLASS_NAME" expression="className()" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="uc" value="private $CLASS_NAME$() {&#10;    throw new java.lang.IllegalStateException(&quot;Utility class&quot;);&#10;}" description="Util class private constructor" toReformat="true" toShortenFQNames="true">
    <variable name="CLASS_NAME" expression="className()" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="uct" value="@org.junit.jupiter.api.Test&#10;@org.junit.jupiter.api.DisplayName(&quot;should throw illegal state exception when initialized&quot;)&#10;void shouldThrowIllegalStateExceptionWhenInitialized() {&#10;  var constructor = $CLASS_NAME$.class.getDeclaredConstructors()[0];&#10;    constructor.setAccessible(true);&#10;    try {&#10;        constructor.newInstance();&#10;    } catch (IllegalStateException | InstantiationException | Ille galAccessException |&#10;                 InvocationTargetException exception) {&#10;        assertThat(exception.getCause().getClass()).isEqualTo(IllegalStateException.class);&#10;        assertThat(exception.getCause().getMessage( )).isEqualTo(&quot;Utility class&quot;);&#10;    }&#10;}" description="Create a new JUnit test for utility class" toReformat="true" toShortenFQNames="true">
    <variable name="CLASS_NAME" expression="className()" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="utilTest" value="@org.junit.jupiter.api.Test&#10;@org.junit.jupiter.api.DisplayName(&quot;should throw illegal state exception when initialized&quot;)&#10;void shouldThrowIllegalStateExceptionWhenInitialized() {&#10;    var constructor = $CLASS_NAME$.class.getDeclaredConstructors()[0];&#10;    constructor.setAccessible(true);&#10;    try {&#10;        constructor.newInstance();&#10;    } catch (IllegalStateException | InstantiationException | IllegalAccessException |&#10;             java.lang.reflect.InvocationTargetException exception) {&#10;        org.assertj.core.api.Assertions.assertThat(exception.getCause().getClass()).isEqualTo(IllegalStateException.class);&#10;        org.assertj.core.api.Assertions.assertThat(exception.getCause().getMessage()).isEqualTo(&quot;Utility class&quot;);&#10;    }&#10;}&#10;" description="Create a new JUnit test for private constructor" toReformat="true" toShortenFQNames="true" useStaticImport="true">
    <variable name="CLASS_NAME" expression="substringBefore(className(), &quot;Test&quot;)" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="ut" value="@org.junit.jupiter.api.Test&#10;@org.junit.jupiter.api.DisplayName(&quot;should throw illegal state exception when initialized&quot;)&#10;void shouldThrowIllegalStateExceptionWhenInitialized() {&#10;    var constructor = $CLASS_NAME$.class.getDeclaredConstructors()[0];&#10;    constructor.setAccessible(true);&#10;    try {&#10;        constructor.newInstance();&#10;    } catch (IllegalStateException | InstantiationException | IllegalAccessException |&#10;             java.lang.reflect.InvocationTargetException exception) {&#10;        org.assertj.core.api.Assertions.assertThat(exception.getCause().getClass()).isEqualTo(IllegalStateException.class);&#10;        org.assertj.core.api.Assertions.assertThat(exception.getCause().getMessage()).isEqualTo(&quot;Utility class&quot;);&#10;    }&#10;}&#10;" description="Create a new JUnit test for private constructor" toReformat="true" toShortenFQNames="true" useStaticImport="true">
    <variable name="CLASS_NAME" expression="substringBefore(className(), &quot;Test&quot;)" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="utilClass" value="private $CLASS_NAME$() {&#10;    throw new java.lang.IllegalStateException(&quot;Utility class&quot;);&#10;}" description="Util class private constructor" toReformat="true" toShortenFQNames="true">
    <variable name="CLASS_NAME" expression="className()" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="writeFile" value="String content = &quot;$STRING_CONTENT$&quot;;&#10;java.nio.file.Path filePath = java.nio.file.Paths.get(&quot;$FILE_PATH$&quot;);&#10;java.nio.file.Files.writeString(filePath, content);" description="Write content to file" toReformat="false" toShortenFQNames="true">
    <variable name="STRING_CONTENT" expression="" defaultValue="&quot;content&quot;" alwaysStopAt="true" />
    <variable name="FILE_PATH" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_EXPRESSION" value="true" />
    </context>
  </template>
  <template name="readFile" value="java.nio.file.Path filePath = java.nio.file.Paths.get(&quot;$FILE_PATH$&quot;);&#10;String content = java.nio.file.Files.readString(filePath);&#10;System.out.println(content);" description="Get string from reading text file" toReformat="false" toShortenFQNames="true">
    <variable name="FILE_PATH" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_EXPRESSION" value="true" />
    </context>
  </template>
  <template name="readFileLineByLine" value="java.nio.file.Path filePath = java.nio.file.Paths.get(&quot;$FILE_PATH$&quot;);&#10;&#10;try (java.util.stream.Stream&lt;String&gt; lines = java.nio.file.Files.lines(filePath)) {&#10;    lines.forEach(System.out::println);&#10;&#10;} catch (java.io.IOException e) {&#10;    throw new RuntimeException(e);&#10;}" description="Read file line by line" toReformat="false" toShortenFQNames="true">
    <variable name="FILE_PATH" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_EXPRESSION" value="true" />
    </context>
  </template>
  <template name="writeFileBuffer" value="String content = &quot;$STRING_CONTENT$&quot;;&#10;java.nio.file.Path filePath = java.nio.file.Paths.get(&quot;$FILE_PATH$&quot;);&#10;&#10;try (java.io.BufferedWriter writer = java.nio.file.Files.newBufferedWriter(filePath, java.nio.charset.StandardCharsets.UTF_8)) {&#10;    writer.write(content);&#10;} catch (java.io.IOException e) {&#10;    throw new RuntimeException(e);&#10;}" description="Write content to file using buffer" toReformat="false" toShortenFQNames="true">
    <variable name="STRING_CONTENT" expression="" defaultValue="&quot;content&quot;" alwaysStopAt="true" />
    <variable name="FILE_PATH" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_EXPRESSION" value="true" />
    </context>
  </template>
  <template name="writeFileBufferLineByLine" value="java.nio.file.Path filePath = java.nio.file.Paths.get(&quot;$FILE_PATH$&quot;);&#10;&#10;try (java.io.BufferedWriter writer = java.nio.file.Files.newBufferedWriter(filePath)) {&#10;    writer.write(&quot;First line&quot;);&#10;    writer.newLine();&#10;    writer.write(&quot;Second line&quot;);&#10;&#10;} catch (java.io.IOException e) {&#10;    throw new RuntimeException(e);&#10;}" description="Write content to file using buffer" toReformat="false" toShortenFQNames="true">
    <variable name="FILE_PATH" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_EXPRESSION" value="true" />
    </context>
  </template>
  <template name="httpGET" value=" String url = &quot;https://jsonplaceholder.typicode.com/posts/1&quot;;&#10;&#10; try (java.net.http.HttpClient httpClient = HttpClient.newBuilder()&#10;         .version(java.net.http.HttpClient.Version.HTTP_2)&#10;         .connectTimeout(java.time.Duration.ofSeconds(10))&#10;         .build()) {&#10;&#10;     java.net.http.HttpRequest request = HttpRequest.newBuilder()&#10;             .uri(java.net.URI.create(url))&#10;             .timeout(java.time.Duration.ofSeconds(10))&#10;             .header(&quot;Accept&quot;, &quot;application/json&quot;)&#10;             .GET()&#10;             .build();&#10;&#10;     java.net.http.HttpResponse&lt;String&gt; response = httpClient.send(request, java.net.http.HttpResponse.BodyHandlers.ofString());&#10;     System.out.println(&quot;Response status code: &quot; + response.statusCode());&#10;     System.out.println(&quot;Response body: &quot; + response.body());&#10;&#10; } catch (java.io.IOException | InterruptedException e) {&#10;     e.printStackTrace();&#10; }&#10; " description="HttpClient blocking GET" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_EXPRESSION" value="true" />
    </context>
  </template>
  <template name="httpGETAsync" value="String url = &quot;https://jsonplaceholder.typicode.com/posts/1&quot;;&#10;&#10;try (java.net.http.HttpClient httpClient = java.net.http.HttpClient.newBuilder()&#10;        .version(java.net.http.HttpClient.Version.HTTP_2)&#10;        .connectTimeout(java.time.Duration.ofSeconds(10))&#10;        .build()) {&#10;&#10;    java.net.http.HttpRequest request = java.net.http.HttpRequest.newBuilder()&#10;            .uri(java.net.URI.create(url))&#10;            .timeout(java.time.Duration.ofSeconds(10))&#10;            .header(&quot;Accept&quot;, &quot;application/json&quot;)&#10;            .GET()&#10;            .build();&#10;&#10;    java.util.concurrent.CompletableFuture&lt;java.net.http.HttpResponse&lt;String&gt;&gt; responseCompletableFuture = httpClient.sendAsync(request, java.net.http.HttpResponse.BodyHandlers.ofString());&#10;    responseCompletableFuture.thenAccept(stringHttpResponse -&gt; {&#10;                System.out.println(&quot;Response status code: &quot; + stringHttpResponse.statusCode());&#10;                System.out.println(&quot;Response body: &quot; + stringHttpResponse.body());&#10;            })&#10;            .exceptionally(throwable -&gt; {&#10;                throwable.printStackTrace();&#10;                return null;&#10;            })&#10;            .join();&#10;}&#10;" description="HttpClient non-blocking GET" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_EXPRESSION" value="true" />
    </context>
  </template>
  <template name="httpPOST" value="String url = &quot;https://jsonplaceholder.typicode.com/posts&quot;;&#10;&#10;try (java.net.http.HttpClient httpClient = java.net.http.HttpClient.newBuilder()&#10;        .version(java.net.http.HttpClient.Version.HTTP_2)&#10;        .connectTimeout(java.time.Duration.ofSeconds(10))&#10;        .build()) {&#10;&#10;    String json = &quot;&quot;&quot;&#10;            {&#10;              id: 101,&#10;              title: 'foo',&#10;              body: 'bar',&#10;              userId: 1&#10;            }&#10;            &quot;&quot;&quot;;&#10;&#10;    java.net.http.HttpRequest request = java.net.http.HttpRequest.newBuilder()&#10;            .uri(java.net.URI.create(url))&#10;            .timeout(java.time.Duration.ofSeconds(10))&#10;            .header(&quot;Accept&quot;, &quot;application/json&quot;)&#10;            .POST(java.net.http.HttpRequest.BodyPublishers.ofString(json))&#10;            .build();&#10;&#10;    java.net.http.HttpResponse&lt;String&gt; response = httpClient.send(request, java.net.http.HttpResponse.BodyHandlers.ofString());&#10;    System.out.println(&quot;Response status code: &quot; + response.statusCode());&#10;    System.out.println(&quot;Response body: &quot; + response.body());&#10;&#10;} catch (java.io.IOException | InterruptedException e) {&#10;    e.printStackTrace();&#10;}&#10;" description="Httpclient blocking POST" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_EXPRESSION" value="true" />
    </context>
  </template>
</templateSet>